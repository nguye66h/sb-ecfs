from abc import ABC, abstractmethod

class Bath(ABC):

    def __init__(self, T: float,
                       alpha: float, s: float, wc: float):

        self.T = T
        self.alpha = alpha
        self.s = s
        self.wc = wc

    @abstractmethod
    def eta_k_ctc(self, k: int):
        raise NotImplementedError

    @abstractmethod
    def eta_kk_ctc(self, k: int, kp: int):
        raise NotImplementedError

    ###############
    ###############
    
    @abstractmethod
    def eta_pp_tt_kk(self, d: int):
        raise NotImplementedError

    @abstractmethod
    def eta_pm_tt_kk(self, d: int):
        raise NotImplementedError

    @abstractmethod
    def eta_pm_tt_k(self):
        raise NotImplementedError

    @abstractmethod
    def eta_pp_tt_k(self):
        raise NotImplementedError

    ###############

    @abstractmethod
    def eta_pp_bb_kk(self, d: int):
        raise NotImplementedError

    @abstractmethod
    def eta_pm_bb_kk(self, sum_kkp: int):
        raise NotImplementedError

    @abstractmethod
    def eta_pp_bb_k(self):
        raise NotImplementedError

    @abstractmethod
    def eta_pm_bb_k(self, k: int):
        raise NotImplementedError
    
    ###############
    
    @abstractmethod
    def eta_pp_mix_kk(self, k: int, kp: int):
        raise NotImplementedError

    @abstractmethod
    def eta_pm_mix_kk(self, k: int, kp: int):
        raise NotImplementedError
